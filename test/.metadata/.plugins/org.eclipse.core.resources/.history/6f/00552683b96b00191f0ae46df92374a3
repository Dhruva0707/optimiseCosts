/*****************************************************************
 *
 * Title: Nelder Mead Algorithm
 * Author: Dhruva Bhatia
 * Date: 1st May 2019
 *
 * Description:
 * This is a basic program to test the Nelder mead cost optimisation
 * algorithm. It takes in a starting cost from the user and then
 * attempts to find the costs that result in the minimum cost. Overall,
 * the algorithm is continued for 50 iterations.
 *
 *****************************************************************/
#include <iostream>

using namespace std;

// The cost function attempts to return the cost based on the input parameters.
float cost(float x[3])
{
	// x represents the array of input values passed to the function
	// the function may be determined by the user to either send these values to
	// another application and use the desired vs actual response of the application
	// to identify the cost based on these parameters.
	// In this case, we are trying to optimise a 3D quadratic equation, where the
	// the best input parameters are absolute and equal to the values corresponding
	// to x0, y0 and z0 as described below:
	float x0 = 1;
	float y0 = 3;
	float z0 = 0.5; // here we have taken these values at random
	float final_cost = (x[0]-x0)*(x[0]-x0)+   //continued on next line
			           (x[1]-y0)*(x[1]-y0)+   //continued on next line
					   (x[2]-z0)*(x[2]-z0);
	return final_cost;
}

int main(int argc, char** argv)
{	// in this case, there is no need to pass parameters to the main function,
	// I just do it, for practice sake, and use in ROS.

	// 1. First, we create an array to store the variables and there respective costs
	//		a. since we are optimising 3 variables, there will be 4 different data
	//         points. so the dimensions of the variable and cost matrix is 4x4
	//      b. columns as: [x y z cost] and each row specifing a particular data point
	float var_mat[4][4];
	// 2. we get the first input values from the user
	cout<<"Enter the first starting value: ";
	cin>>x[0][0];

	cout<<"Enter the second starting value: ";
	cin>>x[0][1];

	cout<<"Enter the third starting value: ";
	cin>>x[0][2];
	//3. initialise the first four rows
	x[0][3] = cost(x[0][0:3]);


}
